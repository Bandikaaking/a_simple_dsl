#!/usr/bin/env php
<?php
/*
  ASD - A Small DSL
  Fully modular main executable
  License: MIT
*/

// --- Check arguments ---
if ($argc < 2) die("Usage: asd <file.asd>\n");

$file = $argv[1];
if (!file_exists($file)) die("File not found: $file\n");

// --- Variables ---
$variables = [];
$lines = file($file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);

// --- Include modules ---
$moduleDir = __DIR__;
require_once "$moduleDir/errors.php";
require_once "$moduleDir/if_else_elseif_and_regex.php";
require_once "$moduleDir/print_and_declarevars.php";
require_once "$moduleDir/math_operations.php";
//require_once "$moduleDir/regex.php";
require_once "$moduleDir/other_statements.php";
require_once "$moduleDir/loop_statements.php";

// --- Utilities ---
function replace_vars($text, $variables) {
    return preg_replace_callback('/=\((\w+)\)/', function($matches) use ($variables) {
        return $variables[$matches[1]] ?? '';
    }, $text);
}

function read_line() {
    return trim(fgets(STDIN));
}

function execute_line($cmd, &$variables) {
    $cmd = trim($cmd);
    
    // Handle REMOVE ... AND PRINT syntax
    if (preg_match('/^REMOVE\s+(.+?)\s+AND\s+PRINT\s+(.+)$/i', $cmd, $m)) {
        $to_remove = trim($m[1]);
        $text = trim($m[2]);
        
        // Replace variables including %line, %line1, %line2, etc.
        $text = replace_vars($text, $variables);
        
        // Also handle %line pattern variables (from LINE:MATCH)
        $text = preg_replace_callback('/%line(\d*)/', function($matches) use ($variables) {
            $num = $matches[1] ? intval($matches[1]) : 1;
            return $variables['line' . $num] ?? '';
        }, $text);
        
        // Remove the specified text from the final output (case-insensitive)
        $text = str_ireplace($to_remove, '', $text);
        echo $text . "\n";
        return;
    }
    
    // Handle regular PRINT
    if (preg_match('/^PRINT\s+(.+)$/i', $cmd, $m)) {
        $text = replace_vars($m[1], $variables);
        echo $text . "\n";
    }
    // Handle SETVAR in execute_line (for IF/ELSEIF/ELSE)
    elseif (preg_match('/^SETVAR\s+(\w+)\s+(.+)$/i', $cmd, $m)) {
        $var = $m[1];
        $value = $m[2];
        
        // Handle RANDOM(min,max) in SETVAR
        if (preg_match('/^RANDOM\((\d+),(\d+)\)$/i', $value, $random_match)) {
            $min = intval($random_match[1]);
            $max = intval($random_match[2]);
            $variables[$var] = rand($min, $max);
        } else {
            // Regular value assignment
            $variables[$var] = replace_vars($value, $variables);
        }
    }
}
// --- Execute a line through all modules ---
// --- Execute a line through all modules ---
function execute_line_full($line, &$variables, &$lines, &$i) {
    if_else_elseif($line, $variables, $lines, $i);       // if / elseif / else module
    print_and_declarevars($line, $variables);            // print & setvar
    arithmetic_line($line, $variables);                  // math operations
    loop_line($line, $variables, $lines, $i);            // loop module
    while_line($line, $variables, $lines, $i);           // while module
    readfile_line($line, $variables);                    // READFILE command
    sleep_line($line);                                   // sleep command
    random_line($line, $variables);                      // random command
    len_line($line, $variables);                         // length command
    upper_line($line, $variables);                       // uppercase command
    lower_line($line, $variables);                       // lowercase command
    replace_line($line, $variables);                     // replace command
}
// --- Process a block of lines ---
function process_block($lines, &$variables) {
    for ($i = 0; $i < count($lines); $i++) {
        execute_line_full($lines[$i], $variables, $lines, $i);
    }
}

// --- Run the ASD script ---
process_block($lines, $variables);
?>